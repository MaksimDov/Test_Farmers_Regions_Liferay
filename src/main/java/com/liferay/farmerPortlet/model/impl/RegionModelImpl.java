package com.liferay.farmerPortlet.model.impl;

import com.liferay.farmerPortlet.model.Region;
import com.liferay.farmerPortlet.model.RegionModel;
import com.liferay.farmerPortlet.model.RegionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Region service. Represents a row in the &quot;TestTask_Region&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.farmerPortlet.model.RegionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegionImpl}.
 * </p>
 *
 * @author Test Test
 * @see RegionImpl
 * @see com.liferay.farmerPortlet.model.Region
 * @see com.liferay.farmerPortlet.model.RegionModel
 * @generated
 */
@JSON(strict = true)
public class RegionModelImpl extends BaseModelImpl<Region>
    implements RegionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a region model instance should use the {@link com.liferay.farmerPortlet.model.Region} interface instead.
     */
    public static final String TABLE_NAME = "TestTask_Region";
    public static final Object[][] TABLE_COLUMNS = {
            { "regionId", Types.BIGINT },
            { "regionName", Types.VARCHAR },
            { "regionCode", Types.VARCHAR },
            { "archiveStatus", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table TestTask_Region (regionId LONG not null primary key,regionName VARCHAR(75) null,regionCode VARCHAR(75) null,archiveStatus VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table TestTask_Region";
    public static final String ORDER_BY_JPQL = " ORDER BY region.regionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY TestTask_Region.regionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.farmerPortlet.model.Region"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.farmerPortlet.model.Region"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.farmerPortlet.model.Region"),
            true);
    public static long REGIONCODE_COLUMN_BITMASK = 1L;
    public static long REGIONNAME_COLUMN_BITMASK = 2L;
    public static long REGIONID_COLUMN_BITMASK = 4L;
    public static final String MAPPING_TABLE_TESTTASK_FARMERS_REGIONS_NAME = "TestTask_Farmers_Regions";
    public static final Object[][] MAPPING_TABLE_TESTTASK_FARMERS_REGIONS_COLUMNS =
        {
            { "farmerId", Types.BIGINT },
            { "regionId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_TESTTASK_FARMERS_REGIONS_SQL_CREATE =
        "create table TestTask_Farmers_Regions (farmerId LONG not null,regionId LONG not null,primary key (farmerId, regionId))";
    public static final boolean FINDER_CACHE_ENABLED_TESTTASK_FARMERS_REGIONS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.TestTask_Farmers_Regions"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.farmerPortlet.model.Region"));
    private static ClassLoader _classLoader = Region.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Region.class };
    private long _regionId;
    private String _regionName;
    private String _originalRegionName;
    private String _regionCode;
    private String _originalRegionCode;
    private String _archiveStatus;
    private long _columnBitmask;
    private Region _escapedModel;

    public RegionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Region toModel(RegionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Region model = new RegionImpl();

        model.setRegionId(soapModel.getRegionId());
        model.setRegionName(soapModel.getRegionName());
        model.setRegionCode(soapModel.getRegionCode());
        model.setArchiveStatus(soapModel.getArchiveStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Region> toModels(RegionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Region> models = new ArrayList<Region>(soapModels.length);

        for (RegionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _regionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRegionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _regionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Region.class;
    }

    @Override
    public String getModelClassName() {
        return Region.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("regionId", getRegionId());
        attributes.put("regionName", getRegionName());
        attributes.put("regionCode", getRegionCode());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long regionId = (Long) attributes.get("regionId");

        if (regionId != null) {
            setRegionId(regionId);
        }

        String regionName = (String) attributes.get("regionName");

        if (regionName != null) {
            setRegionName(regionName);
        }

        String regionCode = (String) attributes.get("regionCode");

        if (regionCode != null) {
            setRegionCode(regionCode);
        }

        String archiveStatus = (String) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @JSON
    @Override
    public long getRegionId() {
        return _regionId;
    }

    @Override
    public void setRegionId(long regionId) {
        _columnBitmask = -1L;

        _regionId = regionId;
    }

    @JSON
    @Override
    public String getRegionName() {
        if (_regionName == null) {
            return StringPool.BLANK;
        } else {
            return _regionName;
        }
    }

    @Override
    public void setRegionName(String regionName) {
        _columnBitmask |= REGIONNAME_COLUMN_BITMASK;

        if (_originalRegionName == null) {
            _originalRegionName = _regionName;
        }

        _regionName = regionName;
    }

    public String getOriginalRegionName() {
        return GetterUtil.getString(_originalRegionName);
    }

    @JSON
    @Override
    public String getRegionCode() {
        if (_regionCode == null) {
            return StringPool.BLANK;
        } else {
            return _regionCode;
        }
    }

    @Override
    public void setRegionCode(String regionCode) {
        _columnBitmask |= REGIONCODE_COLUMN_BITMASK;

        if (_originalRegionCode == null) {
            _originalRegionCode = _regionCode;
        }

        _regionCode = regionCode;
    }

    public String getOriginalRegionCode() {
        return GetterUtil.getString(_originalRegionCode);
    }

    @JSON
    @Override
    public String getArchiveStatus() {
        if (_archiveStatus == null) {
            return StringPool.BLANK;
        } else {
            return _archiveStatus;
        }
    }

    @Override
    public void setArchiveStatus(String archiveStatus) {
        _archiveStatus = archiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Region.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Region toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Region) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RegionImpl regionImpl = new RegionImpl();

        regionImpl.setRegionId(getRegionId());
        regionImpl.setRegionName(getRegionName());
        regionImpl.setRegionCode(getRegionCode());
        regionImpl.setArchiveStatus(getArchiveStatus());

        regionImpl.resetOriginalValues();

        return regionImpl;
    }

    @Override
    public int compareTo(Region region) {
        int value = 0;

        if (getRegionId() < region.getRegionId()) {
            value = -1;
        } else if (getRegionId() > region.getRegionId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Region)) {
            return false;
        }

        Region region = (Region) obj;

        long primaryKey = region.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RegionModelImpl regionModelImpl = this;

        regionModelImpl._originalRegionName = regionModelImpl._regionName;

        regionModelImpl._originalRegionCode = regionModelImpl._regionCode;

        regionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Region> toCacheModel() {
        RegionCacheModel regionCacheModel = new RegionCacheModel();

        regionCacheModel.regionId = getRegionId();

        regionCacheModel.regionName = getRegionName();

        String regionName = regionCacheModel.regionName;

        if ((regionName != null) && (regionName.length() == 0)) {
            regionCacheModel.regionName = null;
        }

        regionCacheModel.regionCode = getRegionCode();

        String regionCode = regionCacheModel.regionCode;

        if ((regionCode != null) && (regionCode.length() == 0)) {
            regionCacheModel.regionCode = null;
        }

        regionCacheModel.archiveStatus = getArchiveStatus();

        String archiveStatus = regionCacheModel.archiveStatus;

        if ((archiveStatus != null) && (archiveStatus.length() == 0)) {
            regionCacheModel.archiveStatus = null;
        }

        return regionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{regionId=");
        sb.append(getRegionId());
        sb.append(", regionName=");
        sb.append(getRegionName());
        sb.append(", regionCode=");
        sb.append(getRegionCode());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.liferay.farmerPortlet.model.Region");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>regionId</column-name><column-value><![CDATA[");
        sb.append(getRegionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionName</column-name><column-value><![CDATA[");
        sb.append(getRegionName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionCode</column-name><column-value><![CDATA[");
        sb.append(getRegionCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
