package com.liferay.farmerPortlet.model.impl;

import com.liferay.farmerPortlet.model.Farmer;
import com.liferay.farmerPortlet.model.FarmerModel;
import com.liferay.farmerPortlet.model.FarmerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Farmer service. Represents a row in the &quot;TestTask_Farmer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.farmerPortlet.model.FarmerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerImpl}.
 * </p>
 *
 * @author Test Test
 * @see FarmerImpl
 * @see com.liferay.farmerPortlet.model.Farmer
 * @see com.liferay.farmerPortlet.model.FarmerModel
 * @generated
 */
@JSON(strict = true)
public class FarmerModelImpl extends BaseModelImpl<Farmer>
    implements FarmerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a farmer model instance should use the {@link com.liferay.farmerPortlet.model.Farmer} interface instead.
     */
    public static final String TABLE_NAME = "TestTask_Farmer";
    public static final Object[][] TABLE_COLUMNS = {
            { "farmerId", Types.BIGINT },
            { "companyName", Types.VARCHAR },
            { "organizationForm", Types.VARCHAR },
            { "inn", Types.VARCHAR },
            { "kpp", Types.VARCHAR },
            { "ogrn", Types.VARCHAR },
            { "regionId", Types.BIGINT },
            { "registrationDate", Types.VARCHAR },
            { "archiveStatus", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table TestTask_Farmer (farmerId LONG not null primary key,companyName VARCHAR(75) null,organizationForm VARCHAR(75) null,inn VARCHAR(75) null,kpp VARCHAR(75) null,ogrn VARCHAR(75) null,regionId LONG,registrationDate VARCHAR(75) null,archiveStatus VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table TestTask_Farmer";
    public static final String ORDER_BY_JPQL = " ORDER BY farmer.farmerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY TestTask_Farmer.farmerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.farmerPortlet.model.Farmer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.farmerPortlet.model.Farmer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.farmerPortlet.model.Farmer"),
            true);
    public static long COMPANYNAME_COLUMN_BITMASK = 1L;
    public static long FARMERID_COLUMN_BITMASK = 2L;
    public static final String MAPPING_TABLE_TESTTASK_FARMERS_REGIONS_NAME = "TestTask_Farmers_Regions";
    public static final Object[][] MAPPING_TABLE_TESTTASK_FARMERS_REGIONS_COLUMNS =
        {
            { "farmerId", Types.BIGINT },
            { "regionId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_TESTTASK_FARMERS_REGIONS_SQL_CREATE =
        "create table TestTask_Farmers_Regions (farmerId LONG not null,regionId LONG not null,primary key (farmerId, regionId))";
    public static final boolean FINDER_CACHE_ENABLED_TESTTASK_FARMERS_REGIONS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.TestTask_Farmers_Regions"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.farmerPortlet.model.Farmer"));
    private static ClassLoader _classLoader = Farmer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Farmer.class };
    private long _farmerId;
    private String _companyName;
    private String _originalCompanyName;
    private String _organizationForm;
    private String _inn;
    private String _kpp;
    private String _ogrn;
    private long _regionId;
    private String _registrationDate;
    private String _archiveStatus;
    private long _columnBitmask;
    private Farmer _escapedModel;

    public FarmerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Farmer toModel(FarmerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Farmer model = new FarmerImpl();

        model.setFarmerId(soapModel.getFarmerId());
        model.setCompanyName(soapModel.getCompanyName());
        model.setOrganizationForm(soapModel.getOrganizationForm());
        model.setInn(soapModel.getInn());
        model.setKpp(soapModel.getKpp());
        model.setOgrn(soapModel.getOgrn());
        model.setRegionId(soapModel.getRegionId());
        model.setRegistrationDate(soapModel.getRegistrationDate());
        model.setArchiveStatus(soapModel.getArchiveStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Farmer> toModels(FarmerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Farmer> models = new ArrayList<Farmer>(soapModels.length);

        for (FarmerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFarmerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Farmer.class;
    }

    @Override
    public String getModelClassName() {
        return Farmer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("farmerId", getFarmerId());
        attributes.put("companyName", getCompanyName());
        attributes.put("organizationForm", getOrganizationForm());
        attributes.put("inn", getInn());
        attributes.put("kpp", getKpp());
        attributes.put("ogrn", getOgrn());
        attributes.put("regionId", getRegionId());
        attributes.put("registrationDate", getRegistrationDate());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long farmerId = (Long) attributes.get("farmerId");

        if (farmerId != null) {
            setFarmerId(farmerId);
        }

        String companyName = (String) attributes.get("companyName");

        if (companyName != null) {
            setCompanyName(companyName);
        }

        String organizationForm = (String) attributes.get("organizationForm");

        if (organizationForm != null) {
            setOrganizationForm(organizationForm);
        }

        String inn = (String) attributes.get("inn");

        if (inn != null) {
            setInn(inn);
        }

        String kpp = (String) attributes.get("kpp");

        if (kpp != null) {
            setKpp(kpp);
        }

        String ogrn = (String) attributes.get("ogrn");

        if (ogrn != null) {
            setOgrn(ogrn);
        }

        Long regionId = (Long) attributes.get("regionId");

        if (regionId != null) {
            setRegionId(regionId);
        }

        String registrationDate = (String) attributes.get("registrationDate");

        if (registrationDate != null) {
            setRegistrationDate(registrationDate);
        }

        String archiveStatus = (String) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @JSON
    @Override
    public long getFarmerId() {
        return _farmerId;
    }

    @Override
    public void setFarmerId(long farmerId) {
        _columnBitmask = -1L;

        _farmerId = farmerId;
    }

    @JSON
    @Override
    public String getCompanyName() {
        if (_companyName == null) {
            return StringPool.BLANK;
        } else {
            return _companyName;
        }
    }

    @Override
    public void setCompanyName(String companyName) {
        _columnBitmask |= COMPANYNAME_COLUMN_BITMASK;

        if (_originalCompanyName == null) {
            _originalCompanyName = _companyName;
        }

        _companyName = companyName;
    }

    public String getOriginalCompanyName() {
        return GetterUtil.getString(_originalCompanyName);
    }

    @JSON
    @Override
    public String getOrganizationForm() {
        if (_organizationForm == null) {
            return StringPool.BLANK;
        } else {
            return _organizationForm;
        }
    }

    @Override
    public void setOrganizationForm(String organizationForm) {
        _organizationForm = organizationForm;
    }

    @JSON
    @Override
    public String getInn() {
        if (_inn == null) {
            return StringPool.BLANK;
        } else {
            return _inn;
        }
    }

    @Override
    public void setInn(String inn) {
        _inn = inn;
    }

    @JSON
    @Override
    public String getKpp() {
        if (_kpp == null) {
            return StringPool.BLANK;
        } else {
            return _kpp;
        }
    }

    @Override
    public void setKpp(String kpp) {
        _kpp = kpp;
    }

    @JSON
    @Override
    public String getOgrn() {
        if (_ogrn == null) {
            return StringPool.BLANK;
        } else {
            return _ogrn;
        }
    }

    @Override
    public void setOgrn(String ogrn) {
        _ogrn = ogrn;
    }

    @JSON
    @Override
    public long getRegionId() {
        return _regionId;
    }

    @Override
    public void setRegionId(long regionId) {
        _regionId = regionId;
    }

    @JSON
    @Override
    public String getRegistrationDate() {
        if (_registrationDate == null) {
            return StringPool.BLANK;
        } else {
            return _registrationDate;
        }
    }

    @Override
    public void setRegistrationDate(String registrationDate) {
        _registrationDate = registrationDate;
    }

    @JSON
    @Override
    public String getArchiveStatus() {
        if (_archiveStatus == null) {
            return StringPool.BLANK;
        } else {
            return _archiveStatus;
        }
    }

    @Override
    public void setArchiveStatus(String archiveStatus) {
        _archiveStatus = archiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Farmer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Farmer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Farmer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FarmerImpl farmerImpl = new FarmerImpl();

        farmerImpl.setFarmerId(getFarmerId());
        farmerImpl.setCompanyName(getCompanyName());
        farmerImpl.setOrganizationForm(getOrganizationForm());
        farmerImpl.setInn(getInn());
        farmerImpl.setKpp(getKpp());
        farmerImpl.setOgrn(getOgrn());
        farmerImpl.setRegionId(getRegionId());
        farmerImpl.setRegistrationDate(getRegistrationDate());
        farmerImpl.setArchiveStatus(getArchiveStatus());

        farmerImpl.resetOriginalValues();

        return farmerImpl;
    }

    @Override
    public int compareTo(Farmer farmer) {
        int value = 0;

        if (getFarmerId() < farmer.getFarmerId()) {
            value = -1;
        } else if (getFarmerId() > farmer.getFarmerId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Farmer)) {
            return false;
        }

        Farmer farmer = (Farmer) obj;

        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FarmerModelImpl farmerModelImpl = this;

        farmerModelImpl._originalCompanyName = farmerModelImpl._companyName;

        farmerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Farmer> toCacheModel() {
        FarmerCacheModel farmerCacheModel = new FarmerCacheModel();

        farmerCacheModel.farmerId = getFarmerId();

        farmerCacheModel.companyName = getCompanyName();

        String companyName = farmerCacheModel.companyName;

        if ((companyName != null) && (companyName.length() == 0)) {
            farmerCacheModel.companyName = null;
        }

        farmerCacheModel.organizationForm = getOrganizationForm();

        String organizationForm = farmerCacheModel.organizationForm;

        if ((organizationForm != null) && (organizationForm.length() == 0)) {
            farmerCacheModel.organizationForm = null;
        }

        farmerCacheModel.inn = getInn();

        String inn = farmerCacheModel.inn;

        if ((inn != null) && (inn.length() == 0)) {
            farmerCacheModel.inn = null;
        }

        farmerCacheModel.kpp = getKpp();

        String kpp = farmerCacheModel.kpp;

        if ((kpp != null) && (kpp.length() == 0)) {
            farmerCacheModel.kpp = null;
        }

        farmerCacheModel.ogrn = getOgrn();

        String ogrn = farmerCacheModel.ogrn;

        if ((ogrn != null) && (ogrn.length() == 0)) {
            farmerCacheModel.ogrn = null;
        }

        farmerCacheModel.regionId = getRegionId();

        farmerCacheModel.registrationDate = getRegistrationDate();

        String registrationDate = farmerCacheModel.registrationDate;

        if ((registrationDate != null) && (registrationDate.length() == 0)) {
            farmerCacheModel.registrationDate = null;
        }

        farmerCacheModel.archiveStatus = getArchiveStatus();

        String archiveStatus = farmerCacheModel.archiveStatus;

        if ((archiveStatus != null) && (archiveStatus.length() == 0)) {
            farmerCacheModel.archiveStatus = null;
        }

        return farmerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{farmerId=");
        sb.append(getFarmerId());
        sb.append(", companyName=");
        sb.append(getCompanyName());
        sb.append(", organizationForm=");
        sb.append(getOrganizationForm());
        sb.append(", inn=");
        sb.append(getInn());
        sb.append(", kpp=");
        sb.append(getKpp());
        sb.append(", ogrn=");
        sb.append(getOgrn());
        sb.append(", regionId=");
        sb.append(getRegionId());
        sb.append(", registrationDate=");
        sb.append(getRegistrationDate());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.liferay.farmerPortlet.model.Farmer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>farmerId</column-name><column-value><![CDATA[");
        sb.append(getFarmerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyName</column-name><column-value><![CDATA[");
        sb.append(getCompanyName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationForm</column-name><column-value><![CDATA[");
        sb.append(getOrganizationForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inn</column-name><column-value><![CDATA[");
        sb.append(getInn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kpp</column-name><column-value><![CDATA[");
        sb.append(getKpp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ogrn</column-name><column-value><![CDATA[");
        sb.append(getOgrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionId</column-name><column-value><![CDATA[");
        sb.append(getRegionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registrationDate</column-name><column-value><![CDATA[");
        sb.append(getRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
